import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { X, ChevronRight, ChevronLeft, Keyboard } from 'lucide-react';

interface OnboardingTutorialProps {
  onComplete: () => void;
}

const tutorialSteps = [
  {
    title: 'Welcome to Image AI Ranker',
    description: 'This tool helps you compare and rank images generated by different AI models.',
    icon: '🎯',
  },
  {
    title: 'Round-Robin Comparison',
    description: 'You\'ll see pairs of images side by side. Every image will be compared with every other image to ensure fair ranking.',
    icon: '🔄',
  },
  {
    title: 'How to Vote',
    description: 'Click on the image you prefer, or use keyboard shortcuts: Press A for left, S for tie, D for right.',
    icon: '⌨️',
  },
  {
    title: 'Quality Matters',
    description: 'Take your time to evaluate details like realism, composition, and overall quality. Your consistency is tracked!',
    icon: '⭐',
  },
  {
    title: 'Progress Tracking',
    description: 'You can see your progress, undo votes, and even reset if needed. Your work is automatically saved.',
    icon: '📊',
  },
];

export default function OnboardingTutorial({ onComplete }: OnboardingTutorialProps) {
  const [currentStep, setCurrentStep] = useState(0);
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    // Check if user has seen tutorial
    const hasSeenTutorial = localStorage.getItem('hasSeenOnboarding');
    if (!hasSeenTutorial) {
      setIsVisible(true);
    }
  }, []);

  const handleNext = () => {
    if (currentStep < tutorialSteps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      handleComplete();
    }
  };

  const handlePrevious = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleComplete = () => {
    localStorage.setItem('hasSeenOnboarding', 'true');
    setIsVisible(false);
    onComplete();
  };

  const handleSkip = () => {
    localStorage.setItem('hasSeenOnboarding', 'true');
    setIsVisible(false);
    onComplete();
  };

  if (!isVisible) return null;

  const step = tutorialSteps[currentStep];

  return (
    <div className="fixed inset-0 bg-background/95 backdrop-blur-sm z-50 flex items-center justify-center p-4 animate-fade-in">
      <Card className="max-w-2xl w-full glass-card animate-scale-in">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <span className="text-4xl">{step.icon}</span>
              <div>
                <CardTitle>{step.title}</CardTitle>
                <CardDescription>
                  Step {currentStep + 1} of {tutorialSteps.length}
                </CardDescription>
              </div>
            </div>
            <Button
              variant="ghost"
              size="icon"
              onClick={handleSkip}
              className="hover:bg-destructive/10"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        </CardHeader>
        <CardContent className="space-y-6">
          <p className="text-lg">{step.description}</p>

          {/* Keyboard shortcuts demo on step 3 */}
          {currentStep === 2 && (
            <div className="grid grid-cols-3 gap-4 p-4 bg-muted/50 rounded-lg">
              <div className="flex flex-col items-center gap-2">
                <kbd className="px-3 py-2 bg-background border rounded text-sm font-mono">A</kbd>
                <span className="text-xs text-muted-foreground">Vote Left</span>
              </div>
              <div className="flex flex-col items-center gap-2">
                <kbd className="px-3 py-2 bg-background border rounded text-sm font-mono">S</kbd>
                <span className="text-xs text-muted-foreground">Mark as Tie</span>
              </div>
              <div className="flex flex-col items-center gap-2">
                <kbd className="px-3 py-2 bg-background border rounded text-sm font-mono">D</kbd>
                <span className="text-xs text-muted-foreground">Vote Right</span>
              </div>
            </div>
          )}

          {/* Progress indicator */}
          <div className="flex gap-2 justify-center">
            {tutorialSteps.map((_, idx) => (
              <div
                key={idx}
                className={`h-2 rounded-full transition-all ${
                  idx === currentStep
                    ? 'w-8 bg-primary'
                    : idx < currentStep
                    ? 'w-2 bg-primary/50'
                    : 'w-2 bg-muted'
                }`}
              />
            ))}
          </div>

          {/* Navigation buttons */}
          <div className="flex items-center justify-between gap-4">
            <Button
              variant="outline"
              onClick={handlePrevious}
              disabled={currentStep === 0}
              className="gap-2"
            >
              <ChevronLeft className="h-4 w-4" />
              Previous
            </Button>

            <Button onClick={handleSkip} variant="ghost">
              Skip Tutorial
            </Button>

            <Button onClick={handleNext} className="gap-2">
              {currentStep === tutorialSteps.length - 1 ? "Let's Start!" : 'Next'}
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
